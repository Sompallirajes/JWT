Please provide JWT code


ChatGPT said:
Here's how you can implement JWT authentication in your ExpenseSplitter App using ASP.NET Core Web API and React.

Step 1: Install Required Packages
In your ASP.NET Core Web API, install the required NuGet packages:

bash
Copy
Edit
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet add package System.IdentityModel.Tokens.Jwt
Step 2: Configure JWT in appsettings.json
Add a section for JWT settings:

json
Copy
Edit
"JwtSettings": {
  "SecretKey": "ThisIsASecretKeyForJwtToken",  
  "Issuer": "ExpenseSplitterApp",
  "Audience": "ExpenseSplitterUsers",
  "ExpiryMinutes": 60
}
Step 3: Create JWT Token Generator (JwtService.cs)
Inside your Services folder, create JwtService.cs:

csharp
Copy
Edit
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace ExpenseSplitterApp.Services
{
    public class JwtService
    {
        private readonly string _secretKey;
        private readonly string _issuer;
        private readonly string _audience;
        private readonly int _expiryMinutes;

        public JwtService(IConfiguration config)
        {
            _secretKey = config["JwtSettings:SecretKey"];
            _issuer = config["JwtSettings:Issuer"];
            _audience = config["JwtSettings:Audience"];
            _expiryMinutes = int.Parse(config["JwtSettings:ExpiryMinutes"]);
        }

        public string GenerateToken(string userId, string role)
        {
            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, userId),
                new Claim(ClaimTypes.Role, role),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_secretKey));
            var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                _issuer,
                _audience,
                claims,
                expires: DateTime.UtcNow.AddMinutes(_expiryMinutes),
                signingCredentials: credentials
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
Step 4: Configure JWT Authentication in Program.cs
Modify Program.cs to use JWT authentication:

csharp
Copy
Edit
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var secretKey = jwtSettings["SecretKey"];

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = jwtSettings["Issuer"],
            ValidAudience = jwtSettings["Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))
        };
    });

builder.Services.AddAuthorization();
builder.Services.AddSingleton<JwtService>();

var app = builder.Build();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
Step 5: Create Login API (AuthController.cs)
Inside your Controllers folder, create AuthController.cs:

csharp
Copy
Edit
using Microsoft.AspNetCore.Mvc;
using ExpenseSplitterApp.Services;

namespace ExpenseSplitterApp.Controllers
{
    [Route("api/auth")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly JwtService _jwtService;

        public AuthController(JwtService jwtService)
        {
            _jwtService = jwtService;
        }

        [HttpPost("login")]
        public IActionResult Login([FromBody] LoginModel login)
        {
            if (login.Username == "admin" && login.Password == "password123") // Replace with database check
            {
                var token = _jwtService.GenerateToken("1", "Admin");
                return Ok(new { Token = token });
            }
            return Unauthorized("Invalid credentials");
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
Step 6: Protect API Routes with JWT
Modify any controller to require authentication:

csharp
Copy
Edit
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace ExpenseSplitterApp.Controllers
{
    [Route("api/expenses")]
    [ApiController]
    [Authorize]  // Protects this API with JWT
    public class ExpensesController : ControllerBase
    {
        [HttpGet]
        public IActionResult GetExpenses()
        {
            return Ok(new { Message = "Here are your expenses!" });
        }
    }
}
Step 7: Implement JWT in React (Frontend)
Install Axios and React Router
In your React project, install dependencies:

bash
Copy
Edit
npm install axios react-router-dom
Create API Service (services/authService.js)
javascript
Copy
Edit
import axios from "axios";

const API_URL = "http://localhost:5000/api/auth";

export const login = async (username, password) => {
  const response = await axios.post(`${API_URL}/login`, { username, password });
  if (response.data.token) {
    localStorage.setItem("token", response.data.token);
  }
  return response.data;
};

export const getToken = () => localStorage.getItem("token");

export const logout = () => {
  localStorage.removeItem("token");
};
Protect Routes (ProtectedRoute.js)
javascript
Copy
Edit
import React from "react";
import { Navigate, Outlet } from "react-router-dom";
import { getToken } from "../services/authService";

const ProtectedRoute = () => {
  return getToken() ? <Outlet /> : <Navigate to="/login" />;
};

export default ProtectedRoute;
Login Component (Login.js)
javascript
Copy
Edit
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { login } from "../services/authService";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleLogin = async () => {
    try {
      await login(username, password);
      navigate("/dashboard");
    } catch (error) {
      alert("Login failed!");
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <input type="text" placeholder="Username" onChange={(e) => setUsername(e.target.value)} />
      <input type="password" placeholder="Password" onChange={(e) => setPassword(e.target.value)} />
      <button onClick={handleLogin}>Login</button>
    </div>
  );
};

export default Login;
Set Up Routing (App.js)
javascript
Copy
Edit
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Login from "./pages/Login";
import Dashboard from "./pages/Dashboard";
import ProtectedRoute from "./components/ProtectedRoute";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route element={<ProtectedRoute />}>
          <Route path="/dashboard" element={<Dashboard />} />
        </Route>
      </Routes>
    </Router>
  );
};

export default App;
Summary
✅ JWT Authentication in .NET Core Web API
✅ Protecting API Routes
✅ React JWT Authentication & Protected Routes
✅ Storing & Using JWT in LocalStoragePlease provide JWT code


ChatGPT said:
Here's how you can implement JWT authentication in your ExpenseSplitter App using ASP.NET Core Web API and React.

Step 1: Install Required Packages
In your ASP.NET Core Web API, install the required NuGet packages:

bash
Copy
Edit
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet add package System.IdentityModel.Tokens.Jwt
Step 2: Configure JWT in appsettings.json
Add a section for JWT settings:

json
Copy
Edit
"JwtSettings": {
  "SecretKey": "ThisIsASecretKeyForJwtToken",  
  "Issuer": "ExpenseSplitterApp",
  "Audience": "ExpenseSplitterUsers",
  "ExpiryMinutes": 60
}
Step 3: Create JWT Token Generator (JwtService.cs)
Inside your Services folder, create JwtService.cs:

csharp
Copy
Edit
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace ExpenseSplitterApp.Services
{
    public class JwtService
    {
        private readonly string _secretKey;
        private readonly string _issuer;
        private readonly string _audience;
        private readonly int _expiryMinutes;

        public JwtService(IConfiguration config)
        {
            _secretKey = config["JwtSettings:SecretKey"];
            _issuer = config["JwtSettings:Issuer"];
            _audience = config["JwtSettings:Audience"];
            _expiryMinutes = int.Parse(config["JwtSettings:ExpiryMinutes"]);
        }

        public string GenerateToken(string userId, string role)
        {
            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, userId),
                new Claim(ClaimTypes.Role, role),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_secretKey));
            var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                _issuer,
                _audience,
                claims,
                expires: DateTime.UtcNow.AddMinutes(_expiryMinutes),
                signingCredentials: credentials
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
Step 4: Configure JWT Authentication in Program.cs
Modify Program.cs to use JWT authentication:

csharp
Copy
Edit
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var secretKey = jwtSettings["SecretKey"];

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = jwtSettings["Issuer"],
            ValidAudience = jwtSettings["Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))
        };
    });

builder.Services.AddAuthorization();
builder.Services.AddSingleton<JwtService>();

var app = builder.Build();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
Step 5: Create Login API (AuthController.cs)
Inside your Controllers folder, create AuthController.cs:

csharp
Copy
Edit
using Microsoft.AspNetCore.Mvc;
using ExpenseSplitterApp.Services;

namespace ExpenseSplitterApp.Controllers
{
    [Route("api/auth")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly JwtService _jwtService;

        public AuthController(JwtService jwtService)
        {
            _jwtService = jwtService;
        }

        [HttpPost("login")]
        public IActionResult Login([FromBody] LoginModel login)
        {
            if (login.Username == "admin" && login.Password == "password123") // Replace with database check
            {
                var token = _jwtService.GenerateToken("1", "Admin");
                return Ok(new { Token = token });
            }
            return Unauthorized("Invalid credentials");
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
Step 6: Protect API Routes with JWT
Modify any controller to require authentication:

csharp
Copy
Edit
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace ExpenseSplitterApp.Controllers
{
    [Route("api/expenses")]
    [ApiController]
    [Authorize]  // Protects this API with JWT
    public class ExpensesController : ControllerBase
    {
        [HttpGet]
        public IActionResult GetExpenses()
        {
            return Ok(new { Message = "Here are your expenses!" });
        }
    }
}
Step 7: Implement JWT in React (Frontend)
Install Axios and React Router
In your React project, install dependencies:

bash
Copy
Edit
npm install axios react-router-dom
Create API Service (services/authService.js)
javascript
Copy
Edit
import axios from "axios";

const API_URL = "http://localhost:5000/api/auth";

export const login = async (username, password) => {
  const response = await axios.post(`${API_URL}/login`, { username, password });
  if (response.data.token) {
    localStorage.setItem("token", response.data.token);
  }
  return response.data;
};

export const getToken = () => localStorage.getItem("token");

export const logout = () => {
  localStorage.removeItem("token");
};
Protect Routes (ProtectedRoute.js)
javascript
Copy
Edit
import React from "react";
import { Navigate, Outlet } from "react-router-dom";
import { getToken } from "../services/authService";

const ProtectedRoute = () => {
  return getToken() ? <Outlet /> : <Navigate to="/login" />;
};

export default ProtectedRoute;
Login Component (Login.js)
javascript
Copy
Edit
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { login } from "../services/authService";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleLogin = async () => {
    try {
      await login(username, password);
      navigate("/dashboard");
    } catch (error) {
      alert("Login failed!");
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <input type="text" placeholder="Username" onChange={(e) => setUsername(e.target.value)} />
      <input type="password" placeholder="Password" onChange={(e) => setPassword(e.target.value)} />
      <button onClick={handleLogin}>Login</button>
    </div>
  );
};

export default Login;
Set Up Routing (App.js)
javascript
Copy
Edit
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Login from "./pages/Login";
import Dashboard from "./pages/Dashboard";
import ProtectedRoute from "./components/ProtectedRoute";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route element={<ProtectedRoute />}>
          <Route path="/dashboard" element={<Dashboard />} />
        </Route>
      </Routes>
    </Router>
  );
};

export default App;
Summary
✅ JWT Authentication in .NET Core Web API
✅ Protecting API Routes
✅ React JWT Authentication & Protected Routes
✅ Storing & Using JWT in LocalStorage
